#!/usr/bin/make -f

# This needs to run before inclusion of CDBS snippets
debian/control:: debian/control.in
DEB_PHONY_RULES += debian/control.in
debian/control.in::
	sed -e 's/__LIBPKGNAME__/$(LIBPKGNAME)/g' <debian/control.in.in >debian/control.in

include /usr/share/cdbs/1/rules/utils.mk
include /usr/share/cdbs/1/class/makefile.mk
include /usr/share/cdbs/1/rules/debhelper.mk

SONAME = $(DEB_UPSTREAM_VERSION)
LIBPKGNAME = libv8-$(SONAME)

# suppress checking binary files, to not upset dpkg-source
DEB_COPYRIGHT_CHECK_IGNORE_REGEX = ^(benchmarks/v8-logo\.png|test/mjsunit/unicode-test\.js|debian/(changelog|copyright(|_hints|_newhints)))$

DEB_DH_MAKESHLIBS_ARGS = -- -c4

# map HOST ARCH AND OS to v8 options
v8arch := $(or $(v8arch),$(if $(filter i386,$(DEB_HOST_ARCH)),ia32))
v8arch := $(or $(v8arch),$(if $(filter amd64,$(DEB_HOST_ARCH)),x64))
v8arch := $(or $(v8arch),$(if $(filter armel,$(DEB_HOST_ARCH)),arm))
v8arch := $(or $(v8arch),$(if $(filter armhf,$(DEB_HOST_ARCH)),arm))
v8arch := $(or $(v8arch),$(if $(filter mipsel,$(DEB_HOST_ARCH)),mips))
v8arch := $(or $(v8arch),$(DEB_HOST_ARCH))
v8os := $(or $(v8os),$(if $(filter linux,$(DEB_HOST_ARCH_OS)),linux))
v8os := $(or $(v8os),$(if $(filter kfreebsd,$(DEB_HOST_ARCH_OS)),freebsd))
v8os := $(or $(v8os),$(DEB_HOST_ARCH_OS))

DEB_MAKE_EXTRA_ARGS = library=shared soname_version=$(SONAME) OS=$(v8os)

# armel and armhf arches need flags to work around those issues :
# -fno-tree-sink: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=39604
# -Wno-psabi: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=42748
ifeq (armhf, $(DEB_HOST_ARCH))
DEB_MAKE_EXTRA_ARGS += v8_use_arm_eabi_hardfloat=true
CCFLAGS += -fno-tree-sink
CXXFLAGS += -Wno-psabi
endif

ifeq (armel, $(DEB_HOST_ARCH))
DEB_MAKE_EXTRA_ARGS += v8_can_use_unaligned_accesses=false v8_use_arm_eabi_hardfloat=false
CCFLAGS += -fno-tree-sink
CXXFLAGS += -Wno-psabi
# Disable thumb-interworking because v8 supports it only on >= armv5t.
# http://code.google.com/p/v8/issues/detail?id=590
CCFLAGS += -mno-thumb-interwork
endif

export CCFLAGS
export CXXFLAGS

DEB_MAKE_CLEAN_TARGET = clean
DEB_MAKE_BUILD_TARGET = $(v8arch)

# regression tests
DEB_MAKE_CHECK_TARGET = $(v8arch).check

DEB_DH_INSTALL_ARGS_$(LIBPKGNAME) = usr/lib/libv8.so.$(SONAME)

clean::
	rm -rf out
	rm -f tools/*.pyc
	rm -f test/*/*.pyc

# actually run regression tests
#  * relax regression tests when targeted experimental suite
#  * run only javascript tests, cctests are for development purposes
#exp-relax-check := $(if $(shell dpkg-parsechangelog | grep -Fx 'Distribution: experimental'),-)
#common-post-build-impl::
#	$(exp-relax-check)$(if $(filter nocheck,$(DEB_BUILD_OPTIONS)),,LD_PRELOAD=$(CURDIR)/libv8-$(SONAME).so $(CURDIR)/tools/test.py --progress=verbose --snapshot --no-build --timeout=120 --shell=d8 mjsunit message arch=$(v8arch))

#common-install-impl::
#	cd debian/tmp/usr/lib/ ; \
#	mv libv8-$(SONAME)*.so libv8.so.$(SONAME) ; \
#	ln -s -T libv8.so.$(SONAME) libv8.so
