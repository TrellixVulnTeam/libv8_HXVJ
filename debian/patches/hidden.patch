Patch to hide symbols that are make public by default otherwise

--- a/SConstruct
+++ b/SConstruct
@@ -48,9 +48,11 @@
 # and avoid dtoa.c strict aliasing issues
 if os.environ.get('GCC_VERSION') == '44':
     GCC_EXTRA_CCFLAGS = ['-fno-tree-vrp']
+    GCC_EXTRA_CXXFLAGS = ['-fno-strict-aliasing']
     GCC_DTOA_EXTRA_CCFLAGS = ['-fno-strict-aliasing']
 else:
     GCC_EXTRA_CCFLAGS = []
+    GCC_EXTRA_CXXFLAGS = []
     GCC_DTOA_EXTRA_CCFLAGS = []
 
 ANDROID_FLAGS = ['-march=armv5te',
@@ -103,12 +105,16 @@
     },
     'mode:debug': {
       'CPPDEFINES': ['V8_ENABLE_CHECKS']
-    }
+    },
+    'LINKFLAGS': ['$LDFLAGS'],
   },
   'gcc': {
     'all': {
       'CCFLAGS':      ['$DIALECTFLAGS', '$WARNINGFLAGS'],
-      'CXXFLAGS':     ['$CCFLAGS', '-fno-rtti', '-fno-exceptions'],
+      'CXXFLAGS':     ['$CCFLAGS', '-fno-rtti', '-fno-exceptions'] + GCC_EXTRA_CXXFLAGS,
+     },
+     'shlibtype:hidden': {
+       'CPPFLAGS':     ['$CPPFLAGS', '-include' + join(root_dir, 'src/gcc-hidden.h'), '-isystem' + join(root_dir, 'obj/sysheaders/')],
     },
     'mode:debug': {
       'CCFLAGS':      ['-g', '-O0'],
@@ -607,6 +613,11 @@
     'default': 'dumb',
     'help': 'the console to use for the d8 shell'
   },
+  'shlibtype': {
+    'values': ['default', 'hidden'],
+    'default': 'default',
+    'help': 'visibility type for gcc >= 4 shared library'
+  },
   'verbose': {
     'values': ['on', 'off'],
     'default': 'off',
--- /dev/null
+++ b/create-sysheaders.sh
@@ -0,0 +1,19 @@
+#Â°/bin/sh
+
+SYS_HEADERS_DIR=obj/sysheaders
+basen=`basename $0`
+
+headers=`find | xargs grep 'include <' 2>/dev/null | grep -v $basen | sed -e 's/^.*<\(.*\)>.*$/\1/' | sort -u`
+
+mkdir -p $SYS_HEADERS_DIR
+
+for h in $headers; do
+	dir=`dirname $SYS_HEADERS_DIR/$h`
+	if ! test -d $dir; then
+		mkdir -p $dir
+	fi
+	echo "#pragma GCC system_header" >> $SYS_HEADERS_DIR/$h
+	echo "#pragma GCC visibility push (default)" >> $SYS_HEADERS_DIR/$h
+	echo "#include_next <$h>" >> $SYS_HEADERS_DIR/$h
+	echo "#pragma GCC visibility pop" >> $SYS_HEADERS_DIR/$h
+done
--- a/include/v8.h
+++ b/include/v8.h
@@ -91,9 +91,11 @@
 #if defined(__GNUC__) && (__GNUC__ >= 4) && defined(V8_SHARED)
 #define V8EXPORT __attribute__ ((visibility("default")))
 #define V8EXPORT_INLINE __attribute__ ((visibility("default")))
+#define V8NOEXPORT __attribute__ ((visibility("hidden")))
 #else  // defined(__GNUC__) && (__GNUC__ >= 4)
 #define V8EXPORT
 #define V8EXPORT_INLINE
+#define V8NOEXPORT
 #endif  // defined(__GNUC__) && (__GNUC__ >= 4)
 
 #endif  // _WIN32
--- /dev/null
+++ b/src/gcc-hidden.h
@@ -0,0 +1,3 @@
+#if defined(__GNUC__) && (__GNUC__ >= 4)
+#pragma GCC visibility push(hidden)
+#endif
--- a/test/cctest/test-conversions.cc
+++ b/test/cctest/test-conversions.cc
@@ -96,8 +96,8 @@
   uint32_t x;
 
   // One bit bit field can hold values 0 and 1.
-  class OneBit1: public BitField<uint32_t, 0, 1> {};
-  class OneBit2: public BitField<uint32_t, 7, 1> {};
+  class V8NOEXPORT OneBit1: public BitField<uint32_t, 0, 1> {};
+  class V8NOEXPORT OneBit2: public BitField<uint32_t, 7, 1> {};
   CHECK(!OneBit1::is_valid(static_cast<uint32_t>(-1)));
   CHECK(!OneBit2::is_valid(static_cast<uint32_t>(-1)));
   for (int i = 0; i < 2; i++) {
@@ -113,8 +113,8 @@
   CHECK(!OneBit2::is_valid(2));
 
   // Eight bit bit field can hold values from 0 tp 255.
-  class EightBit1: public BitField<uint32_t, 0, 8> {};
-  class EightBit2: public BitField<uint32_t, 13, 8> {};
+  class V8NOEXPORT EightBit1: public BitField<uint32_t, 0, 8> {};
+  class V8NOEXPORT EightBit2: public BitField<uint32_t, 13, 8> {};
   CHECK(!EightBit1::is_valid(static_cast<uint32_t>(-1)));
   CHECK(!EightBit2::is_valid(static_cast<uint32_t>(-1)));
   for (int i = 0; i < 256; i++) {
--- a/test/cctest/test-strings.cc
+++ b/test/cctest/test-strings.cc
@@ -83,8 +83,8 @@
         break;
       }
       case 2: {
-        class Resource: public v8::String::ExternalStringResource,
-                        public ZoneObject {
+        class V8NOEXPORT Resource: public v8::String::ExternalStringResource,
+                                   public ZoneObject {
          public:
           explicit Resource(Vector<const uc16> string): data_(string.start()) {
             length_ = string.length();
