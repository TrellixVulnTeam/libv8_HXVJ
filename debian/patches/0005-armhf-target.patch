--- a/debian/control
+++ b/debian/control
@@ -12,7 +12,7 @@
 
 Package: libv8-dev
 Section: libdevel
-Architecture: i386 amd64 armel mipsel
+Architecture: i386 amd64 armel armhf mipsel
 Depends: libv8-2.4.6 (= ${binary:Version}), ${misc:Depends}
 Description: Development files for the V8 JavaScript Engine
  V8 is Google's open source, high performance JavaScript engine. It is written
@@ -22,7 +22,7 @@
  V8 JavaScript Engine
 
 Package: libv8-2.4.6
-Architecture: i386 amd64 armel mipsel
+Architecture: i386 amd64 armel armhf mipsel
 Depends: ${shlibs:Depends}, ${misc:Depends}
 Description: V8 JavaScript Engine
  V8 is Google's open source, high performance JavaScript engine. It is written
@@ -34,7 +34,7 @@
 Package: libv8-dbg
 Priority: extra
 Section: debug
-Architecture: i386 amd64 armel mipsel
+Architecture: i386 amd64 armel armhf mipsel
 Depends: libv8-2.4.6 (= ${binary:Version}), ${misc:Depends}
 Description: Development symbols for the V8 JavaScript Engine
  V8 is Google's open source, high performance JavaScript engine. It is written
--- a/SConstruct
+++ b/SConstruct
@@ -209,6 +209,16 @@
       'CCFLAGS':      ['-m32'],
       'LINKFLAGS':    ['-m32']
     },
+    'arch:armv7l': {
+      'CPPDEFINES':   ['V8_TARGET_ARCH_ARM'],
+      'unalignedaccesses:on' : {
+        'CPPDEFINES' : ['CAN_USE_UNALIGNED_ACCESSES=1']
+      },
+      'unalignedaccesses:off' : {
+        'CPPDEFINES' : ['CAN_USE_UNALIGNED_ACCESSES=0']
+      },
+      'CCFLAGS':      ['-march=armv7-a']
+    },
     'arch:mips': {
       'CPPDEFINES':   ['V8_TARGET_ARCH_MIPS'],
       'simulator:none': {
@@ -330,6 +340,12 @@
       # used by the arm simulator.
       'WARNINGFLAGS': ['/wd4996']
     },
+    'arch:armv7l': {
+      'CPPDEFINES':   ['V8_TARGET_ARCH_ARM'],
+      # /wd4996 is to silence the warning about sscanf
+      # used by the arm simulator.
+      'WARNINGFLAGS': ['/wd4996']
+    },
     'arch:mips': {
       'CPPDEFINES':   ['V8_TARGET_ARCH_MIPS'],
     },
@@ -429,6 +445,9 @@
     'arch:arm': {
       'LINKFLAGS':   ARM_LINK_FLAGS
     },
+    'arch:armv7l': {
+      'LINKFLAGS':   ARM_LINK_FLAGS
+    },
   },
   'msvc': {
     'all': {
@@ -496,6 +515,9 @@
     'arch:arm': {
       'LINKFLAGS':   ARM_LINK_FLAGS
     },
+    'arch:armv7l': {
+      'LINKFLAGS':   ARM_LINK_FLAGS
+    },
     'arch:ia32': {
       'CCFLAGS':      ['-m32'],
       'LINKFLAGS':    ['-m32']
@@ -672,7 +694,7 @@
     'help': 'the os to build for (' + OS_GUESS + ')'
   },
   'arch': {
-    'values':['arm', 'ia32', 'x64', 'mips'],
+    'values':['arm', 'armv7l', 'ia32', 'x64', 'mips'],
     'default': ARCH_GUESS,
     'help': 'the architecture to build for (' + ARCH_GUESS + ')'
   },
--- a/tools/utils.py
+++ b/tools/utils.py
@@ -70,7 +70,10 @@
   id = platform.machine()
   id = id.lower()  # Windows 7 capitalizes 'AMD64'.
   if id.startswith('arm'):
-    return 'arm'
+    if id == 'armv7l':
+      return 'armv7l'
+    else:
+      return 'arm'
   elif id == 'i86pc':
     return 'ia32'
   elif id == 'x86_64':
